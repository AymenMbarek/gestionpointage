import MetaTags from 'react-meta-tags'
import React, { useState, forwardRef,useEffect } from "react"
import { Link } from "react-router-dom"
import SweetAlert from "react-bootstrap-sweetalert"
import {
  Button, Modal, Pagination, PaginationItem, PaginationLink, Card, CardBody,
  Col, Row, ModalHeader, ModalBody, Form, Input, ModalFooter
} from "reactstrap"
import { AvForm, AvField } from "availity-reactstrap-validation"
import { Edit } from '@material-ui/icons'
import PropTypes from "prop-types"
import { getHolidays ,addNewHoliday,updateHoliday,deleteHoliday, apiError, getHolidaysFail} from "../../../store/actions"
import { connect } from "react-redux"
//Import Breadcrumb
import Breadcrumbs from "../../../components/Common/Breadcrumb"
import './../table.css';
import MaterialTable from 'material-table'
import moment from "moment";
const tableIcons = {
  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),
  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),
  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} style={{color: "primary"}}/>),
}

const Holiday = props => {
  const [data, setData] = useState([]);

  const [modal_edit, setmodal_edit] = React.useState(false)
  const [modal_new, setmodal_new] = React.useState(false)
  const [confirm_alert, setconfirm_alert] = useState(false)
  const [success_dlg, setsuccess_dlg] = useState(false)
  const [dynamic_title, setdynamic_title] = useState("")
  const [dynamic_description, setdynamic_description] = useState("")

  const [selectedHoliday, setSelectedHoliday] = useState({})

  //add
  const handleValidSubmitNewHoliday= (event, values) => {
    console.log("groupe values",values)
    props.addNewHoliday(values)
    window.location.reload(false)
    tog_new()
  }
//upadate
  const handleValidSubmitUpdateHoliday= (event, values) => {
    let obj =values
    obj.id = selectedHoliday.id
    console.log(" values",obj)
    console.log("selected bank",selectedHoliday)
    window.location.reload(false)
 props.updateHoliday(values)
 //props.getHolidays()
   // props.addNewHoliday(values)
   
    tog_edit()
  }
  const editHoliday= (holiday) => {

    console.log("holiday to edit")
   // props.addNewHoliday(values)
   setSelectedHoliday(holiday)
 
    tog_edit()
  }
  const deleteHoliday= (holiday) => {
    console.log("holiday to delete",holiday)
   // props.addNewHoliday(values)
   setSelectedHoliday(holiday)
  
   setconfirm_alert(true)
   
  }

  function tog_new() {
    setmodal_new(!modal_new)
  }
  function tog_edit() {
    setmodal_edit(!modal_edit)
  }
  const columns = [
    { title: "ID", field: "id" },
      { title: "Date", field: "date", render: rowData => <p>{moment(moment(rowData.date, 'YYYY-MM-DD')).format('DD-MM-YYYY')}</p>},

      { title: "Descreption", field: "name" },
  ]
/*start useeffect*/
    useEffect(() => {
       props.getHolidays()
    props.getHolidays()
      console.log("props holiday",props)
      }, [])

  /* end useffect */

  return (
    <React.Fragment>
      <div className="page-content">
        <MetaTags>
          <title>Jours Fériés</title>
        </MetaTags>
        <div className="container-fluid">
          <Breadcrumbs maintitle="Administration" title="Exploitation" breadcrumbItem="Jours Fériés" />
          <Row>
            <Col lg={12}>
              <Card>
                <CardBody>
                  {/* <CardTitle className="h4">Personne Internes List </CardTitle> */}
                <React.Fragment>
                    <Row>
                          <Col sm="4">
                            <div className="search-box me-2 mb-2 d-inline-block">
                              </div>
                          </Col>
                          <Col sm="8">
                            <div className="text-sm-end">
                              <Button  type="button"  color="success" className="btn-rounded mb-2 me-2"
                                       onClick={tog_new}
                              >
                                <i className="mdi mdi-plus me-1" />{" "}
                                Ajout Jour Férié
                              </Button>

                            </div>
                          </Col>
                    </Row>
                  {/* start table list */}
                    <div className="table-responsive">
                      <MaterialTable icons={tableIcons} title="Jours Fériés" data={props.holidays["hydra:member"]} columns={columns}
                      options={{actionsColumnIndex: -1,}}
                       actions={[
                        {
                          icon: () => <Edit />,
                          tooltip: 'Edit Groupe',
                          iconProps: { color: "primary" },
                          onClick:(event, rowData) => editHoliday(rowData) 
                        },
                        rowData => ({
                          icon: 'delete',
                          tooltip: 'Delete Groupe',
                          iconProps: { color: "secondary" },
                          onClick:(event, rowData) => deleteHoliday(rowData) 
                        //  disabled: rowData.birthYear < 2000
                        })
                      ]}
                      />
                    </div>
                  {/* End table list */}
           
                </React.Fragment>

                </CardBody>
              </Card>
            </Col>
          </Row>
        </div>
      </div>

            {/* start new Model */}
            <Modal isOpen={modal_new} role="document" autoFocus={true} centered={true} 
            className="composemodal" tabIndex="-1" toggle={tog_new}>
              <div className="modal-content">
              <AvForm
                      className="mt-4"
                      onValidSubmit={(e, v) => {
                        handleValidSubmitNewHoliday(e, v)
                      }}
                    >
                <ModalHeader toggle={tog_new}>
                 Ajout Jour Férié
                </ModalHeader>
                <ModalBody>
             
                    <div className="mb-3">
                   {/*    <Input type="text" className="form-control" placeholder="Name" /> */}
                      <AvField
                          name="name"
                          label="Name"
                          type="text"
                          required
                          placeholder="name"
                        />
                    </div>
                    <div className="mb-3">
                        {/*    <Input type="text" className="form-control" placeholder="Name" /> */}
                        <AvField
                            name="date"
                            label="Date"
                            type="date"
                            required
                        />
                    </div>
            
                </ModalBody>
                <ModalFooter>
                  <Button coloe="secondary" type="button" onClick={tog_new}  >Fermer</Button>
                  <Button type="submit" color="primary" >Enregistrer <i className="fab fa-save ms-1"></i></Button>
                </ModalFooter>
                </AvForm>
              </div>
            </Modal>
            {/* End new Model */}


            {/* EDIT model */}
            <Modal isOpen={modal_edit}toggle={() => { tog_edit() }}>
              <div className="modal-header">
                <h5 className="modal-title mt-0" id="myModalLabel">
                  Edit holiday ...
                </h5>
                <button type="button" onClick={() => { setmodal_edit(false)  }} className="close"  data-dismiss="modal"  aria-label="Close" >
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <AvForm
                      className="mt-4"
                      onValidSubmit={(e, v) => {
                        handleValidSubmitUpdateHoliday(e, v)
                      }}
                    >
             
                <ModalBody>
             
                   
                   {/*    <Input type="text" className="form-control" placeholder="Name" /> */}
                      <AvField
                          name="name"
                          label="Name"
                          type="text"
                          required
                          value={selectedHoliday.name}
                         // placeholder="Enter holidayn name"
                        />
                    <div className="mb-3">
                        {/*    <Input type="text" className="form-control" placeholder="Name" /> */}
                        <AvField
                            name="date"
                            label="Date"
                            type="date"
                            value={moment(moment(selectedHoliday.date, 'YYYY-MM-DD')).format('YYYY-MM-DD')}

                        />
                    </div>
                  
                </ModalBody>
                <ModalFooter>
                
                <button type="button" onClick={() => { tog_edit() }} className="btn btn-secondary waves-effect" data-dismiss="modal" >
                  Fermer
                </button>
                <button type="submit" className="btn btn-primary waves-effect waves-light" >
                  Enregistrer
                </button>
             
                </ModalFooter>
                </AvForm>

             
            </Modal>
            {/* END EDIT MODEL */}


            {/* Alert Delete */}
              {confirm_alert ? (
                <SweetAlert
                  title="Are you sure?"
                  warning
                  showCancel
                  confirmButtonText="Yes, delete it!"
                  confirmBtnBsStyle="success"
                  cancelBtnBsStyle="danger"
                  onConfirm={() => {
console.log("selected bank to dlete",selectedHoliday)
props.deleteHoliday(selectedHoliday)
                    setconfirm_alert(false)
                    setsuccess_dlg(true)
                    setdynamic_title("Deleted")
                    setdynamic_description("Your holiday has been deleted.")
                    window.location.reload(false)
                  }}
                  onCancel={() => setconfirm_alert(false)}
                >
                  You won't be able to revert this!
                </SweetAlert>
              ) : null}
            {/* End Alert Delete */}
    </React.Fragment>
  )
}


Holiday.propTypes = {
  getHolidays: PropTypes.func,
  addNewHoliday: PropTypes.func,
  updateHoliday: PropTypes.func,
  getHolidaysSuccess: PropTypes.func,
  getHolidaysFail: PropTypes.any,
  holidays: PropTypes.any,
}

const mapStatetoProps = state => {
  const { holidays, getHolidaysFail, loading } = state.Holiday
  return { holidays, getHolidaysFail, loading }
}
// const mapDispatchToProps = dispatch => ({
//     onGetHolidays: () => dispatch(getHolidays())
//   })
const mapDispatchToProps = (dispatch) => ({
  getHolidays: () => dispatch(getHolidays()), 
  addNewHoliday: (holiday) => dispatch(addNewHoliday(holiday)),
  updateHoliday: (val) => dispatch(updateHoliday(val)),
  getHolidaysSuccess: () => dispatch(getHolidaysSuccess()),
  getHolidaysFail: () => dispatch(getHolidaysFail()),
  deleteHoliday: (val) => dispatch(deleteHoliday(val)),
});
export default connect(mapStatetoProps,mapDispatchToProps)(Holiday)
