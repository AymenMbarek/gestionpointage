import MetaTags from 'react-meta-tags'
import React, { useState, forwardRef, useEffect } from "react"
import { Link } from "react-router-dom"
import SweetAlert from "react-bootstrap-sweetalert"
import {Button, Pagination, PaginationItem, PaginationLink, Card,  CardBody,
    Col, Row } from "reactstrap"

import { Edit } from '@material-ui/icons'
import { getPointages ,getPointagesSuccess,addNewPointage,updatePointage,deletePointage, apiError, getPointagesFail} from "../../../store/actions"
import { connect } from "react-redux"
import PropTypes from "prop-types"
//Import Breadcrumb
import Breadcrumbs from "../../../components/Common/Breadcrumb"
import '../table.css';
import MaterialTable from 'material-table'
import moment from "moment";
const tableIcons = {
    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),
    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),
    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} style={{color: "primary"}}/>),
}

const Pointage = props =>  {
    const columns = [
        { title: "ID", field: "id" },
        { title: "Date", field: "date", render: rowData => <p>{moment(rowData.date).utc().format('DD-MM-YYYY')}</p>},

        { title: "Chantier", field: 'chantier', render: rowData => <p>{rowData.chantier? rowData.chantier.denomination :"" }</p> } ,

        { title: "Nom&Prénom", field: 'personne', render: rowData => <p>{rowData.personne? rowData.personne.nom :"" } {rowData.personne? rowData.personne.prenom :"" }</p> } ,
        { title: "Heure_Début", field: "heureDebut",render: rowData=> <p>{moment(rowData.heureDebut).utc().format('HH:mm')}</p>},
        { title: "Heure_Fin", field: "heureFin", render: rowData => <p>{moment(rowData.heureFin).utc().format('HH:mm')}</p>},
        { title: "Nb'Heures", field: 'nbHeure',type: 'numeric' },


    ]
    const [modal_standard, setmodal_standard] = React.useState(false)
    const [modal_large, setmodal_large] = React.useState(false)

    const [confirm_alert, setconfirm_alert] = useState(false)
    const [success_dlg, setsuccess_dlg] = useState(false)
    const [dynamic_title, setdynamic_title] = useState("")
    const [dynamic_description, setdynamic_description] = useState("")
    const [activeTab, setactiveTab] = useState(1)
    const [activeTabProgress, setactiveTabProgress] = useState(1)
    const [progressValue, setprogressValue] = useState(25)
    const [activeTabVartical, setoggleTabVertical] = useState(1)
    const [selectedPointage, setSelectedPointage] = useState({})
    /*start useeffect*/
    useEffect(() => {
        // props.getPointages()

        console.log("props pointages",props)
        props.getPointages()
    }, [])

    /* end useffect */
    const deletePointage = (pointage) => {
        console.log("pointage to delete",pointage)
        // props.addNewPointage(values)
        setSelectedPointage(pointage)
        setconfirm_alert(true)
    }

    return (
        <React.Fragment>
            <div className="page-content">
                <MetaTags>
                    <title>Pointage List</title>
                </MetaTags>
                <div className="container-fluid">
                    <Breadcrumbs maintitle="Assist RH" title="Exploitation" breadcrumbItem="Pointages" />
                    <Row>
                        <Col lg={12}>
                            <Card>
                                <CardBody>
                                    {/* <CardTitle className="h4">Pointages List </CardTitle> */}
                                    <React.Fragment>
                                        <Row>
                                            <Col sm="4">
                                                <div className="search-box me-2 mb-2 d-inline-block">
                                                </div>
                                            </Col>
                                            <Col sm="8">
                                                <div className="text-sm-end">
                                                    <Link className="btn btn-rounded btn-primary waves-effect waves-light"
                                                          to="/add-pointage"
                                                          role="button"
                                                    >
                                                        <i className="mdi mdi-plus me-1" />{" "} Ajout Pointage
                                                    </Link>

                                                </div>
                                            </Col>
                                        </Row>
                                        {/* start table list */}
                                        <div className="table-responsive">
                                            <MaterialTable icons={tableIcons} title="Liste Pointages" data={props.pointages["hydra:member"]} columns={columns}
                                                           options={{columnsButton:true,actionsColumnIndex: -1, exportButton: true}}
                                                           actions={[

                                                               rowData => ({
                                                                   icon: 'delete',
                                                                   tooltip: 'Delete Pointage',
                                                                   iconProps: { color: "secondary" },
                                                                   onClick: () => { setconfirm_alert(true)  },
                                                                   disabled: rowData.birthYear < 2000
                                                               })
                                                           ]}
                                            />
                                        </div>
                                        {/* End table list */}

                                    </React.Fragment>



                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </div>
            </div>


            {/* Alert Delete */}
            {confirm_alert ? (
                <SweetAlert
                    title="Are you sure?"
                    warning
                    showCancel
                    confirmButtonText="Yes, delete it!"
                    confirmBtnBsStyle="success"
                    cancelBtnBsStyle="danger"
                    onConfirm={() => {
                        setconfirm_alert(false)
                        setsuccess_dlg(true)
                        setdynamic_title("Deleted")
                        setdynamic_description("Your file has been deleted.")
                    }}
                    onCancel={() => setconfirm_alert(false)}
                >
                    You won't be able to revert this!
                </SweetAlert>
            ) : null}
            {/* End Alert Delete */}
        </React.Fragment>
    )
}

Pointage.propTypes = {
    getPointages: PropTypes.func,
    getPointagesSuccess: PropTypes.func,
    getPointagesFail: PropTypes.any,
    pointages: PropTypes.any,
    deletePointage:PropTypes.func
}

const mapStatetoProps = state => {
    const { pointages } = state.Pointage
    return { pointages}
}
const mapDispatchToProps = (dispatch) => ({
    getPointages: () => dispatch(getPointages()),
    getPointagesSuccess: () => dispatch(getPointagesSuccess()),
    getPointagesFail: () => dispatch(getPointagesFail()),
    deletePointage: (val) => dispatch(deletePointage(val)),

});
export default connect(mapStatetoProps, mapDispatchToProps)(Pointage)
// Just some styles
