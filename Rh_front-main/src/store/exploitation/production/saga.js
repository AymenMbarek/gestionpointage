import { call, put, takeEvery } from "redux-saga/effects"

// Bnaque Redux States
import {
  GET_PRODUCTIONS,
  ADD_NEW_PRODUCTION,
  UPDATE_PRODUCTION,
  DELETE_PRODUCTION
} from "./actionTypes"
import {
  getProductionsFail,
  getProductionsSuccess,
  addProductionFail,
  addProductionSuccess,
  updateProductionFail,
  updateProductionSuccess,
  deleteProductionSuccess,
  deleteProductionFail
} from "./actions"

//Include Both Helper File with needed methods
import {
  getProductions,
  addNewProduction,
  updateProduction,
  deleteProduction
} from "../../../helpers/fakebackend_helper"


function* fetchProductions() {
  console.log("fetch b")
  try {
    const response = yield call(getProductions)
    console.log("res",response)
    yield put(getProductionsSuccess(response))
     yield takeEvery(GET_CUSTOMERS, fetchCustomers)
  } catch (error) {
    yield put(getProductionsFail(error))
  }
}
function* onAddNewProduction({ payload: event }) {
  try {
    const response = yield call(addNewProduction, event)
     console.log("add saga",response)
    yield put(addProductionSuccess(response))
  } catch (error) {
    yield put(addProductionFail(error))
  }
}

function* onUpdateProduction({ payload: production }) {
  try {
    const response = yield call(updateProduction, production)
    console.log("update saga",response)
    yield put(updateProductionSuccess(response))
  } catch (error) {
    yield put(updateProductionFail(error))
  }
}

function* onDeleteProduction({ payload: production }) {
  try {
    
    const response = yield call(deleteProduction, production)
    yield put(deleteProductionSuccess(response))
  } catch (error) {
    yield put(deleteProductionFail(error))
  }
}

function* productionSaga() {

  yield takeEvery(GET_PRODUCTIONS, fetchProductions)
  yield takeEvery(ADD_NEW_PRODUCTION, onAddNewProduction)
  yield takeEvery(UPDATE_PRODUCTION, onUpdateProduction)
  yield takeEvery(DELETE_PRODUCTION,onDeleteProduction )

}

export default productionSaga
