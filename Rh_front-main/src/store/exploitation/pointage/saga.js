import { call, put, takeEvery } from "redux-saga/effects"

// Bnaque Redux States
import {
  GET_POINTAGES,
  ADD_NEW_POINTAGE,
  UPDATE_POINTAGE,
  DELETE_POINTAGE
} from "./actionTypes"
import {
  getPointagesFail,
  getPointagesSuccess,
  addPointageFail,
  addPointageSuccess,
  updatePointageFail,
  updatePointageSuccess,
  deletePointageSuccess,
  deletePointageFail
} from "./actions"

//Include Both Helper File with needed methods
import {
  getPointages,
  addNewPointage,
  updatePointage,
  deletePointage
} from "../../../helpers/fakebackend_helper"


function* fetchPointages() {
  console.log("fetch saga")
  try {
    const response = yield call(getPointages)
    console.log("res",response)
    yield put(getPointagesSuccess(response))
     yield takeEvery(GET_CUSTOMERS, fetchCustomers)
  } catch (error) {
    yield put(getPointagesFail(error))
  }
}
function* onAddNewPointage({ payload: event }) {
  try {
    const response = yield call(addNewPointage, event)
     console.log("new saga",response)
    yield put(addPointageSuccess(response))
  } catch (error) {
    yield put(addPointageFail(error))
  }
}

function* onUpdatePointage({ payload: pointage }) {
  try {
    const response = yield call(updatePointage, pointage)
    console.log("update saga",response)
    yield put(updatePointageSuccess(response))
  } catch (error) {
    yield put(updatePointageFail(error))
  }
}

function* onDeletePointage({ payload: pointage }) {
  try {
    
    const response = yield call(deletePointage, pointage)
    yield put(deletePointageSuccess(response))
  } catch (error) {
    yield put(deletePointageFail(error))
  }
}

function* banqueSaga() {

  yield takeEvery(GET_POINTAGES, fetchPointages)
  yield takeEvery(ADD_NEW_POINTAGE, onAddNewPointage)
  yield takeEvery(UPDATE_POINTAGE, onUpdatePointage)
  yield takeEvery(DELETE_POINTAGE,onDeletePointage )

}

export default banqueSaga
