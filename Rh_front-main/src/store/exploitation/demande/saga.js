import { call, put, takeEvery } from "redux-saga/effects"

// Bnaque Redux States
import {
  GET_DEMANDES,
  ADD_NEW_DEMANDE,
  UPDATE_DEMANDE,
  DELETE_DEMANDE,
  GET_DEMANDE
} from "./actionTypes"
import {
  getDemandesFail,
  getDemandesSuccess,
  addDemandeFail,
  addDemandeSuccess,
  updateDemandeFail,
  updateDemandeSuccess,
  deleteDemandeSuccess,
  deleteDemandeFail, getDemandeSuccess
} from "./actions"

//Include Both Helper File with needed methods
import {
  getDemandes,
  addNewDemande,
  updateDemande,
  deleteDemande, getDemande
} from "../../../helpers/fakebackend_helper"


function* fetchDemandes() {
  console.log("fetch saga")
  try {
    const response = yield call(getDemandes)
    console.log("res",response)
    yield put(getDemandesSuccess(response))
     yield takeEvery(GET_CUSTOMERS, fetchCustomers)
  } catch (error) {
    yield put(getDemandesFail(error))
  }
}
function* onAddNewDemande({ payload: event }) {
  try {
    const response = yield call(addNewDemande, event)
     console.log("new saga",response)
    yield put(addDemandeSuccess(response))
  } catch (error) {
    yield put(addDemandeFail(error))
  }
}

function* fetchDemande({ payload: demande }) {
  try {
    console.log("kkk",demande)
    const response = yield call(getDemande, demande)
    console.log("gettttt saga",response)
    yield put(getDemandeSuccess(response))
  } catch (error) {
  // yield put(updateDemandeFail(error))
  }
}

function* onUpdateDemande({ payload: demande }) {
  try {
    const response = yield call(updateDemande, demande)
    console.log("update saga",response)
    yield put(updateDemandeSuccess(response))
  } catch (error) {
    yield put(updateDemandeFail(error))
  }
}

function* onDeleteDemande({ payload: demande }) {
  try {
    
    const response = yield call(deleteDemande, demande)
    yield put(deleteDemandeSuccess(response))
  } catch (error) {
    yield put(deleteDemandeFail(error))
  }
}

function* demandeSaga() {

  yield takeEvery(GET_DEMANDES, fetchDemandes)
  yield takeEvery(GET_DEMANDE, fetchDemande)
  yield takeEvery(ADD_NEW_DEMANDE, onAddNewDemande)
  yield takeEvery(UPDATE_DEMANDE, onUpdateDemande)
  yield takeEvery(DELETE_DEMANDE,onDeleteDemande )

}

export default demandeSaga
