import { call, put, takeEvery } from "redux-saga/effects"

// Bnaque Redux States
import {
  GET_ABSENCES,
  ADD_NEW_ABSENCE,
  UPDATE_ABSENCE,
  DELETE_ABSENCE,
  GET_ABSENCE
} from "./actionTypes"
import {
  getAbsencesFail,
  getAbsencesSuccess,
  addAbsenceFail,
  addAbsenceSuccess,
  updateAbsenceFail,
  updateAbsenceSuccess,
  deleteAbsenceSuccess,
  deleteAbsenceFail, getAbsenceSuccess
} from "./actions"

//Include Both Helper File with needed methods
import {
  getAbsences,
  addNewAbsence,
  updateAbsence,
  deleteAbsence, getAbsence
} from "../../../helpers/fakebackend_helper"


function* fetchAbsences() {
  console.log("fetch saga")
  try {
    const response = yield call(getAbsences)
    console.log("res",response)
    yield put(getAbsencesSuccess(response))
     yield takeEvery(GET_CUSTOMERS, fetchCustomers)
  } catch (error) {
    yield put(getAbsencesFail(error))
  }
}
function* onAddNewAbsence({ payload: event }) {
  try {
    const response = yield call(addNewAbsence, event)
     console.log("new saga",response)
    yield put(addAbsenceSuccess(response))
  } catch (error) {
    yield put(addAbsenceFail(error))
  }
}

function* fetchAbsence({ payload: absence }) {
  try {
    console.log("kkk",absence)
    const response = yield call(getAbsence, absence)
    console.log("gettttt saga",response)
    yield put(getAbsenceSuccess(response))
  } catch (error) {
  // yield put(updateAbsenceFail(error))
  }
}

function* onUpdateAbsence({ payload: absence }) {
  try {
    const response = yield call(updateAbsence, absence)
    console.log("update saga",response)
    yield put(updateAbsenceSuccess(response))
  } catch (error) {
    yield put(updateAbsenceFail(error))
  }
}

function* onDeleteAbsence({ payload: absence }) {
  try {
    
    const response = yield call(deleteAbsence, absence)
    yield put(deleteAbsenceSuccess(response))
  } catch (error) {
    yield put(deleteAbsenceFail(error))
  }
}

function* banqueSaga() {

  yield takeEvery(GET_ABSENCES, fetchAbsences)
  yield takeEvery(GET_ABSENCE, fetchAbsence)
  yield takeEvery(ADD_NEW_ABSENCE, onAddNewAbsence)
  yield takeEvery(UPDATE_ABSENCE, onUpdateAbsence)
  yield takeEvery(DELETE_ABSENCE,onDeleteAbsence )

}

export default banqueSaga
